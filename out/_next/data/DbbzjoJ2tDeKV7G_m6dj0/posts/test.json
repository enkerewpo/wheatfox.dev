{"pageProps":{"postData":{"id":"test","contentHtml":"<h2 id=\"introduction\">Introduction</h2>\n<p><img src=\"/images/jr-granular/jr-granular.png\" alt=\"jr-granular.png\"></p>\n<p>In this tutorial I will show you how to make <a href=\"https://github.com/szkkng/jr-granular\">JR-Granular</a>, a real-time granular fx plugin, with\r\nRNBO C++ export and JUCE. In particular, I will focus on the following:</p>\n<ul>\n<li>how to do the RNBO C++ export</li>\n<li>how to connect the exported code and JUCE using <a href=\"https://docs.juce.com/master/classAudioProcessorValueTreeState.html\">APVTS</a></li>\n<li>how to make custom UIs with JUCE</li>\n</ul>\n<p>Let's get started.</p>\n<h3 id=\"prerequisites\">Prerequisites</h3>\n<ul>\n<li>Install Xcode Command Line Tools by running \"xcode-select --install\".</li>\n<li>Download and install <a href=\"https://cmake.org/download/\">CMake</a> by running \"brew install cmake\".</li>\n<li>Get Projucer by downloading <a href=\"https://juce.com/get-juce/download\">JUCE</a>.</li>\n</ul>\n<h2 id=\"making-rnbo-granularmaxpat\">Making rnbo-granular.maxpat</h2>\n<p>In this chapter we will quickly implement a real-time granular fx using the gen~ codebox.</p>\n<ol>\n<li>Create a rnbo~ object.</li>\n</ol>\n<p><img src=\"/images/jr-granular/create-rnbo-object.png\" alt=\"create-rnbo-object.png\"></p>\n<ol start=\"2\">\n<li>Create a gen~ object in the rnbo patcher</li>\n</ol>\n<p><img src=\"/images/jr-granular/create-gen-object.png\" alt=\"create-gen-object.png\"></p>\n<ol start=\"3\">\n<li>Create a codebox object in the gen patcher</li>\n</ol>\n<p><img src=\"/images/jr-granular/create-codebox.png\" alt=\"create-codebox.png\"></p>\n<ol start=\"4\">\n<li>Copy the following gen code and paste it into the codebox.</li>\n</ol>\n<p><img src=\"/images/jr-granular/codebox.png\" alt=\"codebox.png\"></p>\n<div class=\"rehype-code-title\">codebox</div><pre><code class=\"hljs language-c++\"><span class=\"hljs-function\">Param <span class=\"hljs-title\">interval</span><span class=\"hljs-params\">(<span class=\"hljs-number\">100</span>)</span></span>;\r\n<span class=\"hljs-function\">Param <span class=\"hljs-title\">grainSize</span><span class=\"hljs-params\">(<span class=\"hljs-number\">100</span>)</span></span>;\r\n<span class=\"hljs-function\">Param <span class=\"hljs-title\">grainPos</span><span class=\"hljs-params\">(<span class=\"hljs-number\">100</span>)</span></span>;\r\n<span class=\"hljs-function\">Param <span class=\"hljs-title\">width</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0.5</span>)</span></span>;\r\n<span class=\"hljs-function\">Param <span class=\"hljs-title\">pitch</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>)</span></span>;\r\n<span class=\"hljs-function\">Param <span class=\"hljs-title\">mix</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0.5</span>)</span></span>;\r\n<span class=\"hljs-function\">Param <span class=\"hljs-title\">gain</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>)</span></span>;\r\n\r\n<span class=\"hljs-function\">Delay <span class=\"hljs-title\">del_inL</span><span class=\"hljs-params\">(samplerate * <span class=\"hljs-number\">2</span>)</span></span>;\r\n<span class=\"hljs-function\">Delay <span class=\"hljs-title\">del_inR</span><span class=\"hljs-params\">(samplerate * <span class=\"hljs-number\">2</span>)</span></span>;\r\n\r\n<span class=\"hljs-function\">Data <span class=\"hljs-title\">data_param</span><span class=\"hljs-params\">(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">100</span>)</span></span>;\r\n\r\n<span class=\"hljs-function\">History <span class=\"hljs-title\">his_index</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>)</span></span>;\r\n<span class=\"hljs-function\">History <span class=\"hljs-title\">his_mix</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>)</span>, <span class=\"hljs-title\">his_gain</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>)</span></span>;\r\n\r\nhis_mix = (mix - his_mix) * <span class=\"hljs-number\">0.001</span> + his_mix;\r\nhis_gain = (gain - his_gain) * <span class=\"hljs-number\">0.001</span> + his_gain;\r\n\r\nmaxVoice = <span class=\"hljs-number\">100</span>;\r\n\r\ndel_inL.<span class=\"hljs-built_in\">write</span>(in1);\r\ndel_inR.<span class=\"hljs-built_in\">write</span>(in2);\r\n\r\nmCout = <span class=\"hljs-built_in\">counter</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">mstosamps</span>(interval));\r\n<span class=\"hljs-keyword\">if</span> (mCout == <span class=\"hljs-number\">1</span>) {\r\n\t<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">peek</span>(data_param, <span class=\"hljs-number\">0</span>, his_index) == <span class=\"hljs-number\">0</span>) {\r\n\t\t<span class=\"hljs-built_in\">poke</span>(data_param, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, his_index);\r\n\t\t<span class=\"hljs-built_in\">poke</span>(data_param, <span class=\"hljs-built_in\">mstosamps</span>(grainSize), <span class=\"hljs-number\">1</span>, his_index);\r\n\t\tsizeScaled = <span class=\"hljs-built_in\">mstosamps</span>(grainSize);\r\n\t\twidthRand = <span class=\"hljs-built_in\">noise</span>() * <span class=\"hljs-number\">0.5</span> * width;\r\n\t\t<span class=\"hljs-built_in\">poke</span>(data_param, <span class=\"hljs-number\">0.5</span> + widthRand, <span class=\"hljs-number\">3</span>, his_index);\r\n\t\t<span class=\"hljs-built_in\">poke</span>(data_param, <span class=\"hljs-number\">0.5</span> - widthRand, <span class=\"hljs-number\">4</span>, his_index);\r\n\t\tpitchScaled = <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>, pitch / <span class=\"hljs-number\">12</span>) - <span class=\"hljs-number\">1</span>;\r\n\t\t<span class=\"hljs-built_in\">poke</span>(data_param, pitchScaled, <span class=\"hljs-number\">5</span>, his_index);\r\n\t\this_index = <span class=\"hljs-built_in\">wrap</span>(his_index + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, maxVoice);\r\n\t\tposScaled = <span class=\"hljs-built_in\">mstosamps</span>(grainPos) * <span class=\"hljs-built_in\">abs</span>(<span class=\"hljs-built_in\">noise</span>());\r\n\t\t<span class=\"hljs-built_in\">poke</span>(data_param, posScaled + <span class=\"hljs-built_in\">max</span>(sizeScaled*pitchScaled, <span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">2</span>, his_index);\r\n\t}\r\n}\r\n\r\noutL = <span class=\"hljs-number\">0</span>;\r\noutR = <span class=\"hljs-number\">0</span>;\r\ntotalWin = <span class=\"hljs-number\">0</span>;\r\n<span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &#x3C; maxVoice; i += <span class=\"hljs-number\">1</span>) {\r\n\tpCout = <span class=\"hljs-built_in\">peek</span>(data_param, <span class=\"hljs-number\">0</span>, i);\r\n\t<span class=\"hljs-keyword\">if</span> (pCout != <span class=\"hljs-number\">0</span>) {\r\n\t\ts = <span class=\"hljs-built_in\">peek</span>(data_param, <span class=\"hljs-number\">1</span>, i);\r\n\t\t<span class=\"hljs-keyword\">if</span> (pCout &#x3C; s) {\r\n\t\t\tpCoutScaled = pCout / s;\r\n\t\t\twin = <span class=\"hljs-number\">0.5</span> * (<span class=\"hljs-built_in\">sin</span> (<span class=\"hljs-number\">1.5</span> * PI + pCoutScaled * TWOPI) + <span class=\"hljs-number\">1</span>);\r\n\t\t\toutputL = del_inL.<span class=\"hljs-built_in\">read</span>(<span class=\"hljs-built_in\">peek</span>(data_param, <span class=\"hljs-number\">2</span>, i) - pCout * <span class=\"hljs-built_in\">peek</span>(data_param, <span class=\"hljs-number\">5</span>, i)) * win;\r\n\t\t\toutputR = del_inR.<span class=\"hljs-built_in\">read</span>(<span class=\"hljs-built_in\">peek</span>(data_param, <span class=\"hljs-number\">2</span>, i) - pCout * <span class=\"hljs-built_in\">peek</span>(data_param, <span class=\"hljs-number\">5</span>, i)) * win;\r\n\t\t\toutL += outputL * <span class=\"hljs-built_in\">peek</span>(data_param, <span class=\"hljs-number\">3</span>, i);\r\n\t\t\toutR += outputR * <span class=\"hljs-built_in\">peek</span>(data_param, <span class=\"hljs-number\">4</span>, i);\r\n\t\t\t<span class=\"hljs-built_in\">poke</span>(data_param, pCout + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, i);\r\n\t\t\ttotalWin += win;\r\n\t\t} <span class=\"hljs-keyword\">else</span> {\r\n\t\t\t<span class=\"hljs-built_in\">poke</span>(data_param, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, i);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nnormalise = <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">1</span> / <span class=\"hljs-built_in\">max</span>(totalWin, <span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">0.3</span>) * his_gain;\r\nout1 = <span class=\"hljs-built_in\">mix</span>(in1, outL * normalise, his_mix);\r\nout2 = <span class=\"hljs-built_in\">mix</span>(in2, outR * normalise, his_mix);\n</code></pre>\n<ol start=\"5\">\n<li>Finally, create param and setparam objects as shown below:</li>\n</ol>\n<p><img src=\"/images/jr-granular/gen-and-others.png\" alt=\"gen-and-others.png\"></p>\n<h2 id=\"setting-up-a-juce-project\">Setting up a JUCE project</h2>\n<p>First, open Projucer and create a new project named JRGranular to generate the template files PluginProcessor.h/cpp and PluginEditor.h/cpp.\r\nWe will build our projects using CMake, so we will not use Projucer anymore.</p>\n<p><img src=\"/images/jr-granular/new-project.png\" alt=\"new-project.png\"></p>\n<p>Go to the project directory and delete unnecessary files.</p>\n<div class=\"rehype-code-title\">CommandLine</div><pre><code class=\"hljs language-text\">$ cd ~/Desktop/JRGranular\r\n$ rm -rf Builds JuceLibraryCode JRGranular.jucer\n</code></pre>\n<p>Add JUCE v7.0.2 to the project with the following command:</p>\n<div class=\"rehype-code-title\">CommandLine</div><pre><code class=\"hljs language-text\">$ git init\r\n$ git submodule add https://github.com/juce-framework/JUCE.git External/JUCE\r\n$ cd External/JUCE\r\n$ git checkout 7.0.2\r\n$ cd -\n</code></pre>\n<p>Create RnboExport directory for RNBO C++ export destination.</p>\n<div class=\"rehype-code-title\">CommandLine</div><pre><code class=\"hljs language-text\">$ mkdir RnboExport\n</code></pre>\n<p>Create a CMakeLists.txt file, copy and paste the following code into it</p>\n<div class=\"rehype-code-title\">CommandLine</div><pre><code class=\"hljs language-text\">$ touch CMakeLists.txt\n</code></pre>\n<div class=\"rehype-code-title\">CMakeLists.txt</div><pre><code class=\"hljs language-text\">cmake_minimum_required(VERSION 3.21)\r\n\r\nset(PROJECT_NAME \"JR-Granular\")\r\nset(CMAKE_OSX_ARCHITECTURES \"arm64;x86_64\" CACHE STRING \"Build architectures for macOS\")\r\nset(CMAKE_OSX_DEPLOYMENT_TARGET \"10.11\" CACHE STRING \"Minimum macOS version required\")\r\n\r\nproject(\"${PROJECT_NAME}\" VERSION 1.0.0)\r\n\r\nset(formats \"VST3\" \"Standalone\")\r\n\r\nif(APPLE)\r\n    list(APPEND formats \"AU\")\r\nendif()\r\n\r\nadd_subdirectory(External/JUCE)\r\n\r\njuce_add_plugin(\"${PROJECT_NAME}\"\r\n    VERSION \"1.0.0\"\r\n    COMPANY_NAME \"JR-Granular\"\r\n    PLUGIN_MANUFACTURER_CODE \"Jrgn\"\r\n    PLUGIN_CODE \"R001\"\r\n    FORMATS ${formats}\r\n    COPY_PLUGIN_AFTER_BUILD TRUE\r\n    IS_SYNTH FALSE     \r\n    NEEDS_MIDI_INPUT FALSE\r\n    NEEDS_MIDI_OUTPUT FALSE\r\n    IS_MIDI_EFFECT FALSE\r\n    PRODUCT_NAME \"${PROJECT_NAME}\")\r\n\r\njuce_generate_juce_header(\"${PROJECT_NAME}\")\r\n\r\ninclude_directories(\r\n    \"${CMAKE_CURRENT_SOURCE_DIR}/RnboExport/rnbo\"\r\n    \"${CMAKE_CURRENT_SOURCE_DIR}/RnboExport/rnbo/common\")\r\n\r\ntarget_sources(\"${PROJECT_NAME}\"\r\n    PRIVATE\r\n        RnboExport/rnbo_granular.cpp\r\n        RnboExport/rnbo/RNBO.cpp\r\n        Source/PluginProcessor.cpp\r\n        Source/PluginEditor.cpp)\r\n\r\ntarget_compile_features(\"${PROJECT_NAME}\" PUBLIC cxx_std_20)\r\n\r\ntarget_compile_definitions(\"${PROJECT_NAME}\"\r\n    PUBLIC\r\n        JUCE_WEB_BROWSER=0\r\n        JUCE_USE_CURL=0\r\n        JUCE_VST3_CAN_REPLACE_VST2=0)\r\n\r\ntarget_link_libraries(\"${PROJECT_NAME}\"\r\n    PRIVATE\r\n        juce::juce_audio_utils\r\n        juce::juce_recommended_config_flags\r\n        juce::juce_recommended_lto_flags\r\n        juce::juce_recommended_warning_flags)\n</code></pre>\n<p>After these settings, your directory structure should look something like this:</p>\n<p><img src=\"/images/jr-granular/directory-structure.png\" alt=\"directories.png\"></p>\n<h2 id=\"rnbo-c-export\">RNBO C++ Export</h2>\n<p>Click on the export sidebar button located in the right toolbar, and select the C++ Source Code Export.</p>\n<p><img src=\"/images/jr-granular/export-sidebar.png\" alt=\"export-sidebar.png\"></p>\n<p>Click on the choose button to specify the RnboExport directory as the output directory.\r\n<img src=\"/images/jr-granular/output-directory.png\" alt=\"output-directory.png\"></p>\n<p>Change the Export Name and the Classname as follows:\r\n<img src=\"/images/jr-granular/names.png\" alt=\"names.png\"></p>\n<p>Click on the Export to Selected Target button at the bottom right of the window. If there are no error messages in the Export Log, you have succeeded.\r\n<img src=\"/images/jr-granular/export.png\" alt=\"export.png\"></p>\n<p>Return to the console and check that the project can be built successfully.</p>\n<div class=\"rehype-code-title\">CommandLine</div><pre><code class=\"hljs language-text\">$ cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug\r\n$ cmake --build build --config Debug\n</code></pre>\n<p>Run the standalone with the following command. You should see \"Hello, World\".</p>\n<div class=\"rehype-code-title\">CommandLine</div><pre><code class=\"hljs language-text\">$ build/JR-Granular_artefacts/Debug/Standalone/JR-Granular.app/Contents/MacOS/JR-Granular\n</code></pre>\n<p><img src=\"/images/jr-granular/hello-world.png\" alt=\"hello-world.png\"></p>\n<h2 id=\"connecting-the-exported-code-with-juce\">Connecting the exported code with JUCE</h2>\n<p>This chapter explains how to link the exported c++ code with JUCE. My approach is to use <a href=\"https://docs.juce.com/master/classAudioProcessorValueTreeState.html\">juce::AudioProcessorValueTreeState</a>.</p>\n<h3 id=\"paramidsh\">ParamIDs.h</h3>\n<p>First, create the string IDs in ParamIDs.h, which are needed when creating JUCE apvts parameters and when linking the UI and DSP. I do this to prevent typing errors. The value of each variable must correspond to the value of \"paramId\" listed in the RnboExport/description.json.</p>\n<div class=\"rehype-code-title\">CommandLine</div><pre><code class=\"hljs language-text\">$ touch Source/ParamIDs.h\n</code></pre>\n<div class=\"rehype-code-title\">ParamIDs.h</div><pre><code class=\"hljs language-C++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> once</span>\r\n\r\n<span class=\"hljs-keyword\">namespace</span> ParamIDs\r\n{\r\n\r\n    <span class=\"hljs-comment\">// Be the same value as the \"paramId\" listed in the rnbo description.json.</span>\r\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-keyword\">constexpr</span> <span class=\"hljs-keyword\">auto</span> mix       { <span class=\"hljs-string\">\"mix\"</span> };\r\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-keyword\">constexpr</span> <span class=\"hljs-keyword\">auto</span> gain      { <span class=\"hljs-string\">\"gain\"</span> };\r\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-keyword\">constexpr</span> <span class=\"hljs-keyword\">auto</span> grainPos  { <span class=\"hljs-string\">\"grainPos\"</span> };\r\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-keyword\">constexpr</span> <span class=\"hljs-keyword\">auto</span> grainSize { <span class=\"hljs-string\">\"grainSize\"</span> };\r\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-keyword\">constexpr</span> <span class=\"hljs-keyword\">auto</span> interval  { <span class=\"hljs-string\">\"interval\"</span> };\r\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-keyword\">constexpr</span> <span class=\"hljs-keyword\">auto</span> pitch     { <span class=\"hljs-string\">\"pitch\"</span> };\r\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-keyword\">constexpr</span> <span class=\"hljs-keyword\">auto</span> width     { <span class=\"hljs-string\">\"width\"</span> };\r\n\r\n} <span class=\"hljs-comment\">// namespace paramIDs</span>\n</code></pre>\n<h3 id=\"pluginprocessorhcpp\">PluginProcessor.h/cpp</h3>\n<p>PluginProcessor.h/cpp is as follows.</p>\n<div class=\"rehype-code-title\">PluginProcessor.h</div><pre><code class=\"hljs language-C++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> once</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&#x3C;JuceHeader.h></span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">\"RNBO.h\"</span></span>\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title hljs-class\">JRGranularAudioProcessor</span>  : <span class=\"hljs-keyword\">public</span> juce::AudioProcessor,\r\n                                  <span class=\"hljs-keyword\">public</span> juce::AudioProcessorValueTreeState::Listener\r\n{\r\n<span class=\"hljs-keyword\">public</span>:\r\n    <span class=\"hljs-comment\">//==============================================================================</span>\r\n    <span class=\"hljs-built_in\">JRGranularAudioProcessor</span>();\r\n    ~<span class=\"hljs-built_in\">JRGranularAudioProcessor</span>() <span class=\"hljs-keyword\">override</span>;\r\n\r\n    <span class=\"hljs-comment\">//==============================================================================</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">prepareToPlay</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> sampleRate, <span class=\"hljs-type\">int</span> samplesPerBlock)</span> <span class=\"hljs-keyword\">override</span></span>;\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">releaseResources</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">override</span></span>;\r\n\r\n   <span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifndef</span> JucePlugin_PreferredChannelConfigurations</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">isBusesLayoutSupported</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> BusesLayout&#x26; layouts)</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">override</span></span>;\r\n   <span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">processBlock</span> <span class=\"hljs-params\">(juce::AudioBuffer&#x3C;<span class=\"hljs-type\">float</span>>&#x26;, juce::MidiBuffer&#x26;)</span> <span class=\"hljs-keyword\">override</span></span>;\r\n\r\n    <span class=\"hljs-comment\">//==============================================================================</span>\r\n    <span class=\"hljs-function\">juce::AudioProcessorEditor* <span class=\"hljs-title\">createEditor</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">override</span></span>;\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">hasEditor</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">override</span></span>;\r\n\r\n    <span class=\"hljs-comment\">//==============================================================================</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">const</span> juce::String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">override</span></span>;\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">acceptsMidi</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">override</span></span>;\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">producesMidi</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">override</span></span>;\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">isMidiEffect</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">override</span></span>;\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">getTailLengthSeconds</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">override</span></span>;\r\n\r\n    <span class=\"hljs-comment\">//==============================================================================</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">getNumPrograms</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">override</span></span>;\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">getCurrentProgram</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">override</span></span>;\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">setCurrentProgram</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> index)</span> <span class=\"hljs-keyword\">override</span></span>;\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">const</span> juce::String <span class=\"hljs-title\">getProgramName</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> index)</span> <span class=\"hljs-keyword\">override</span></span>;\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">changeProgramName</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> index, <span class=\"hljs-keyword\">const</span> juce::String&#x26; newName)</span> <span class=\"hljs-keyword\">override</span></span>;\r\n\r\n    <span class=\"hljs-comment\">//==============================================================================</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">getStateInformation</span> <span class=\"hljs-params\">(juce::MemoryBlock&#x26; destData)</span> <span class=\"hljs-keyword\">override</span></span>;\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">setStateInformation</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">void</span>* data, <span class=\"hljs-type\">int</span> sizeInBytes)</span> <span class=\"hljs-keyword\">override</span></span>;\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">parameterChanged</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> juce::String&#x26; parameterID, <span class=\"hljs-type\">float</span> newValue)</span> <span class=\"hljs-keyword\">override</span></span>;\r\n\r\n<span class=\"hljs-keyword\">private</span>:\r\n    <span class=\"hljs-comment\">//==============================================================================</span>\r\n    juce::AudioProcessorValueTreeState apvts;\r\n    juce::UndoManager undoManager;\r\n\r\n    RNBO::CoreObject rnboObject;\r\n\r\n    std::unordered_map&#x3C;juce::String, RNBO::ParameterIndex> apvtsParamIdToRnboParamIndex;\r\n\r\n    <span class=\"hljs-built_in\">JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR</span> (JRGranularAudioProcessor)\r\n};\n</code></pre>\n<div class=\"rehype-code-title\">PluginProcessor.cpp</div><pre><code class=\"hljs language-C++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">\"PluginProcessor.h\"</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">\"PluginEditor.h\"</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">\"ParamIDs.h\"</span></span>\r\n\r\n<span class=\"hljs-keyword\">static</span> juce::<span class=\"hljs-function\">AudioProcessorValueTreeState::ParameterLayout <span class=\"hljs-title\">createParameterLayout</span><span class=\"hljs-params\">()</span>\r\n</span>{\r\n    juce::AudioProcessorValueTreeState::ParameterLayout layout;\r\n\r\n    <span class=\"hljs-keyword\">auto</span> msFormat = [](<span class=\"hljs-type\">float</span> value, <span class=\"hljs-type\">int</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (value &#x3C; <span class=\"hljs-number\">100.0f</span>)\r\n            <span class=\"hljs-keyword\">return</span> juce::<span class=\"hljs-built_in\">String</span> (value, <span class=\"hljs-number\">1</span>) + <span class=\"hljs-string\">\" ms\"</span>;\r\n        <span class=\"hljs-keyword\">else</span>\r\n            <span class=\"hljs-keyword\">return</span> juce::<span class=\"hljs-built_in\">String</span> (std::<span class=\"hljs-built_in\">roundf</span> (value)) + <span class=\"hljs-string\">\" ms\"</span>;\r\n    };\r\n\r\n    layout.<span class=\"hljs-built_in\">add</span> (std::<span class=\"hljs-built_in\">make_unique</span>&#x3C;juce::AudioParameterFloat> (juce::ParameterID { ParamIDs::interval, <span class=\"hljs-number\">1</span> },\r\n                                                             <span class=\"hljs-string\">\"intv\"</span>,\r\n                                                             juce::<span class=\"hljs-built_in\">NormalisableRange</span>&#x3C;<span class=\"hljs-type\">float</span>> (<span class=\"hljs-number\">10.0f</span>, <span class=\"hljs-number\">500.0f</span>, <span class=\"hljs-number\">0.01f</span>, <span class=\"hljs-number\">0.405f</span>),\r\n                                                             <span class=\"hljs-number\">100.0f</span>,\r\n                                                             juce::<span class=\"hljs-built_in\">String</span>(),\r\n                                                             juce::AudioProcessorParameter::genericParameter,\r\n                                                             msFormat,\r\n                                                             <span class=\"hljs-literal\">nullptr</span>));\r\n\r\n    layout.<span class=\"hljs-built_in\">add</span> (std::<span class=\"hljs-built_in\">make_unique</span>&#x3C;juce::AudioParameterFloat> (juce::ParameterID { ParamIDs::pitch, <span class=\"hljs-number\">1</span> }, \r\n                                                             ParamIDs::pitch,\r\n                                                             juce::<span class=\"hljs-built_in\">NormalisableRange</span>&#x3C;<span class=\"hljs-type\">float</span>> (<span class=\"hljs-number\">-12.0f</span>, <span class=\"hljs-number\">12.0f</span>, <span class=\"hljs-number\">0.1f</span>, <span class=\"hljs-number\">1.0f</span>),\r\n                                                             <span class=\"hljs-number\">0.0f</span>,\r\n                                                             juce::<span class=\"hljs-built_in\">String</span>(),\r\n                                                             juce::AudioProcessorParameter::genericParameter,\r\n                                                             [](<span class=\"hljs-type\">float</span> value, <span class=\"hljs-type\">int</span>) {\r\n                                                                <span class=\"hljs-keyword\">return</span> juce::<span class=\"hljs-built_in\">String</span> (value, <span class=\"hljs-number\">1</span>) + <span class=\"hljs-string\">\" st\"</span>; },\r\n                                                             <span class=\"hljs-literal\">nullptr</span>));\r\n\r\n    layout.<span class=\"hljs-built_in\">add</span> (std::<span class=\"hljs-built_in\">make_unique</span>&#x3C;juce::AudioParameterFloat> (juce::ParameterID { ParamIDs::grainPos, <span class=\"hljs-number\">1</span> }, \r\n                                                             <span class=\"hljs-string\">\"pos\"</span>,\r\n                                                             juce::<span class=\"hljs-built_in\">NormalisableRange</span>&#x3C;<span class=\"hljs-type\">float</span>> (<span class=\"hljs-number\">10.0f</span>, <span class=\"hljs-number\">500.0f</span>, <span class=\"hljs-number\">1.0f</span>, <span class=\"hljs-number\">0.405f</span>),\r\n                                                             <span class=\"hljs-number\">100.0f</span>,\r\n                                                             juce::<span class=\"hljs-built_in\">String</span>(),\r\n                                                             juce::AudioProcessorParameter::genericParameter,\r\n                                                             msFormat,\r\n                                                             <span class=\"hljs-literal\">nullptr</span>));\r\n\r\n    layout.<span class=\"hljs-built_in\">add</span> (std::<span class=\"hljs-built_in\">make_unique</span>&#x3C;juce::AudioParameterFloat> (juce::ParameterID { ParamIDs::grainSize, <span class=\"hljs-number\">1</span> }, \r\n                                                             <span class=\"hljs-string\">\"size\"</span>,\r\n                                                             juce::<span class=\"hljs-built_in\">NormalisableRange</span>&#x3C;<span class=\"hljs-type\">float</span>> (<span class=\"hljs-number\">10.0f</span>, <span class=\"hljs-number\">500.0f</span>, <span class=\"hljs-number\">0.01f</span>, <span class=\"hljs-number\">0.405f</span>),\r\n                                                             <span class=\"hljs-number\">100.0f</span>,\r\n                                                             juce::<span class=\"hljs-built_in\">String</span>(),\r\n                                                             juce::AudioProcessorParameter::genericParameter,\r\n                                                             msFormat,\r\n                                                             <span class=\"hljs-literal\">nullptr</span>));\r\n\r\n    <span class=\"hljs-keyword\">auto</span> percentFormat = [](<span class=\"hljs-type\">float</span> value, <span class=\"hljs-type\">int</span>)\r\n    {\r\n         <span class=\"hljs-keyword\">if</span> (value &#x3C; <span class=\"hljs-number\">10.0f</span>)\r\n             <span class=\"hljs-keyword\">return</span> juce::<span class=\"hljs-built_in\">String</span> (value, <span class=\"hljs-number\">2</span>) + <span class=\"hljs-string\">\" %\"</span>;\r\n         <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (value &#x3C; <span class=\"hljs-number\">100.0f</span>)\r\n             <span class=\"hljs-keyword\">return</span> juce::<span class=\"hljs-built_in\">String</span> (value, <span class=\"hljs-number\">1</span>) + <span class=\"hljs-string\">\" %\"</span>;\r\n         <span class=\"hljs-keyword\">else</span>\r\n             <span class=\"hljs-keyword\">return</span> juce::<span class=\"hljs-built_in\">String</span> (value, <span class=\"hljs-number\">0</span>) + <span class=\"hljs-string\">\" %\"</span>; \r\n    };\r\n\r\n    layout.<span class=\"hljs-built_in\">add</span> (std::<span class=\"hljs-built_in\">make_unique</span>&#x3C;juce::AudioParameterFloat> (juce::ParameterID { ParamIDs::mix, <span class=\"hljs-number\">1</span> }, \r\n                                                             ParamIDs::mix,\r\n                                                             juce::<span class=\"hljs-built_in\">NormalisableRange</span>&#x3C;<span class=\"hljs-type\">float</span>> (<span class=\"hljs-number\">0.0f</span>, <span class=\"hljs-number\">100.0f</span>, <span class=\"hljs-number\">0.01f</span>, <span class=\"hljs-number\">1.0f</span>),\r\n                                                             <span class=\"hljs-number\">50.0f</span>,\r\n                                                             juce::<span class=\"hljs-built_in\">String</span>(),\r\n                                                             juce::AudioProcessorParameter::genericParameter,\r\n                                                             percentFormat,\r\n                                                             <span class=\"hljs-literal\">nullptr</span>));\r\n\r\n    layout.<span class=\"hljs-built_in\">add</span> (std::<span class=\"hljs-built_in\">make_unique</span>&#x3C;juce::AudioParameterFloat> (juce::ParameterID { ParamIDs::width, <span class=\"hljs-number\">1</span> }, \r\n                                                             ParamIDs::width,\r\n                                                             juce::<span class=\"hljs-built_in\">NormalisableRange</span>&#x3C;<span class=\"hljs-type\">float</span>> (<span class=\"hljs-number\">0.0f</span>, <span class=\"hljs-number\">100.0f</span>, <span class=\"hljs-number\">0.01f</span>, <span class=\"hljs-number\">1.0f</span>),\r\n                                                             <span class=\"hljs-number\">50.0</span>,\r\n                                                             juce::<span class=\"hljs-built_in\">String</span>(),\r\n                                                             juce::AudioProcessorParameter::genericParameter,\r\n                                                             percentFormat,\r\n                                                             <span class=\"hljs-literal\">nullptr</span>));\r\n\r\n    layout.<span class=\"hljs-built_in\">add</span> (std::<span class=\"hljs-built_in\">make_unique</span>&#x3C;juce::AudioParameterFloat> (juce::ParameterID { ParamIDs::gain, <span class=\"hljs-number\">1</span> }, \r\n                                                             <span class=\"hljs-string\">\"vol\"</span>,\r\n                                                             juce::<span class=\"hljs-built_in\">NormalisableRange</span>&#x3C;<span class=\"hljs-type\">float</span>> (<span class=\"hljs-number\">-36.0f</span>, <span class=\"hljs-number\">12.0f</span>, <span class=\"hljs-number\">0.1f</span>, <span class=\"hljs-number\">2.4f</span>),\r\n                                                             <span class=\"hljs-number\">0.0f</span>,\r\n                                                             juce::<span class=\"hljs-built_in\">String</span>(),\r\n                                                             juce::AudioProcessorParameter::genericParameter,\r\n                                                             [](<span class=\"hljs-type\">float</span> value, <span class=\"hljs-type\">int</span>) {\r\n                                                             <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">-10.0f</span> &#x3C; value &#x26;&#x26; value &#x3C; <span class=\"hljs-number\">10.0f</span>)\r\n                                                                 <span class=\"hljs-keyword\">return</span> juce::<span class=\"hljs-built_in\">String</span> (value, <span class=\"hljs-number\">1</span>) + <span class=\"hljs-string\">\" dB\"</span>;\r\n                                                             <span class=\"hljs-keyword\">else</span>\r\n                                                                 <span class=\"hljs-keyword\">return</span> juce::<span class=\"hljs-built_in\">String</span> (std::<span class=\"hljs-built_in\">roundf</span> (value), <span class=\"hljs-number\">0</span>) + <span class=\"hljs-string\">\" dB\"</span>; },\r\n                                                             <span class=\"hljs-literal\">nullptr</span>));\r\n\r\n    <span class=\"hljs-keyword\">return</span> layout;\r\n}\r\n\r\n<span class=\"hljs-comment\">//==============================================================================</span>\r\nJRGranularAudioProcessor::<span class=\"hljs-built_in\">JRGranularAudioProcessor</span>()\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifndef</span> JucePlugin_PreferredChannelConfigurations</span>\r\n     : <span class=\"hljs-built_in\">AudioProcessor</span> (<span class=\"hljs-built_in\">BusesProperties</span>()\r\n                     <span class=\"hljs-meta\">#<span class=\"hljs-keyword\">if</span> ! JucePlugin_IsMidiEffect</span>\r\n                      <span class=\"hljs-meta\">#<span class=\"hljs-keyword\">if</span> ! JucePlugin_IsSynth</span>\r\n                       .<span class=\"hljs-built_in\">withInput</span>  (<span class=\"hljs-string\">\"Input\"</span>,  juce::AudioChannelSet::<span class=\"hljs-built_in\">stereo</span>(), <span class=\"hljs-literal\">true</span>)\r\n                      <span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\r\n                       .<span class=\"hljs-built_in\">withOutput</span> (<span class=\"hljs-string\">\"Output\"</span>, juce::AudioChannelSet::<span class=\"hljs-built_in\">stereo</span>(), <span class=\"hljs-literal\">true</span>)\r\n                     <span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\r\n                       ),\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\r\n       <span class=\"hljs-built_in\">apvts</span> (*<span class=\"hljs-keyword\">this</span>, &#x26;undoManager, <span class=\"hljs-string\">\"Parameters\"</span>, <span class=\"hljs-built_in\">createParameterLayout</span>())\r\n{\r\n    <span class=\"hljs-keyword\">for</span> (RNBO::ParameterIndex i = <span class=\"hljs-number\">0</span>; i &#x3C; rnboObject.<span class=\"hljs-built_in\">getNumParameters</span>(); ++i)\r\n    {\r\n        RNBO::ParameterInfo info;\r\n        rnboObject.<span class=\"hljs-built_in\">getParameterInfo</span> (i, &#x26;info);\r\n\r\n        <span class=\"hljs-keyword\">if</span> (info.visible)\r\n        {\r\n            <span class=\"hljs-keyword\">auto</span> paramID = juce::<span class=\"hljs-built_in\">String</span> (rnboObject.<span class=\"hljs-built_in\">getParameterId</span> (i));\r\n\r\n            <span class=\"hljs-comment\">// Each apvts parameter id and range must be the same as the rnbo param object's.</span>\r\n            <span class=\"hljs-comment\">// If you hit this assertion then you need to fix the incorrect id in ParamIDs.h.</span>\r\n            <span class=\"hljs-built_in\">jassert</span> (apvts.<span class=\"hljs-built_in\">getParameter</span> (paramID) != <span class=\"hljs-literal\">nullptr</span>);  \r\n\r\n            <span class=\"hljs-comment\">// If you hit these assertions then you need to fix the incorrect apvts </span>\r\n            <span class=\"hljs-comment\">// parameter range in createParameterLayout().</span>\r\n            <span class=\"hljs-built_in\">jassert</span> (info.min == apvts.<span class=\"hljs-built_in\">getParameterRange</span> (paramID).start);\r\n            <span class=\"hljs-built_in\">jassert</span> (info.max == apvts.<span class=\"hljs-built_in\">getParameterRange</span> (paramID).end);\r\n\r\n            apvtsParamIdToRnboParamIndex[paramID] = i;\r\n\r\n            apvts.<span class=\"hljs-built_in\">addParameterListener</span> (paramID, <span class=\"hljs-keyword\">this</span>);\r\n            rnboObject.<span class=\"hljs-built_in\">setParameterValue</span> (i, apvts.<span class=\"hljs-built_in\">getRawParameterValue</span> (paramID)-><span class=\"hljs-built_in\">load</span>());\r\n        }\r\n    }\r\n}\r\n\r\nJRGranularAudioProcessor::~<span class=\"hljs-built_in\">JRGranularAudioProcessor</span>()\r\n{\r\n}\r\n\r\n<span class=\"hljs-comment\">//==============================================================================</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">const</span> juce::String <span class=\"hljs-title\">JRGranularAudioProcessor::getName</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span>\r\n</span>{\r\n    <span class=\"hljs-keyword\">return</span> JucePlugin_Name;\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">JRGranularAudioProcessor::acceptsMidi</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span>\r\n</span>{\r\n   <span class=\"hljs-meta\">#<span class=\"hljs-keyword\">if</span> JucePlugin_WantsMidiInput</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n   <span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n   <span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">JRGranularAudioProcessor::producesMidi</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span>\r\n</span>{\r\n   <span class=\"hljs-meta\">#<span class=\"hljs-keyword\">if</span> JucePlugin_ProducesMidiOutput</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n   <span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n   <span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">JRGranularAudioProcessor::isMidiEffect</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span>\r\n</span>{\r\n   <span class=\"hljs-meta\">#<span class=\"hljs-keyword\">if</span> JucePlugin_IsMidiEffect</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n   <span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n   <span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">JRGranularAudioProcessor::getTailLengthSeconds</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span>\r\n</span>{\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0.0</span>;\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">JRGranularAudioProcessor::getNumPrograms</span><span class=\"hljs-params\">()</span>\r\n</span>{\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;   <span class=\"hljs-comment\">// NB: some hosts don't cope very well if you tell them there are 0 programs,</span>\r\n                <span class=\"hljs-comment\">// so this should be at least 1, even if you're not really implementing programs.</span>\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">JRGranularAudioProcessor::getCurrentProgram</span><span class=\"hljs-params\">()</span>\r\n</span>{\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">JRGranularAudioProcessor::setCurrentProgram</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> index)</span>\r\n</span>{\r\n    juce::<span class=\"hljs-built_in\">ignoreUnused</span> (index);\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">const</span> juce::String <span class=\"hljs-title\">JRGranularAudioProcessor::getProgramName</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> index)</span>\r\n</span>{\r\n    juce::<span class=\"hljs-built_in\">ignoreUnused</span> (index);\r\n    <span class=\"hljs-keyword\">return</span> {};\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">JRGranularAudioProcessor::changeProgramName</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> index, <span class=\"hljs-keyword\">const</span> juce::String&#x26; newName)</span>\r\n</span>{\r\n    juce::<span class=\"hljs-built_in\">ignoreUnused</span> (index, newName);\r\n}\r\n\r\n<span class=\"hljs-comment\">//==============================================================================</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">JRGranularAudioProcessor::prepareToPlay</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> sampleRate, <span class=\"hljs-type\">int</span> samplesPerBlock)</span>\r\n</span>{\r\n    rnboObject.<span class=\"hljs-built_in\">prepareToProcess</span> (sampleRate, <span class=\"hljs-built_in\">static_cast</span>&#x3C;<span class=\"hljs-type\">size_t</span>> (samplesPerBlock));\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">JRGranularAudioProcessor::releaseResources</span><span class=\"hljs-params\">()</span>\r\n</span>{\r\n    <span class=\"hljs-comment\">// When playback stops, you can use this as an opportunity to free up any</span>\r\n    <span class=\"hljs-comment\">// spare memory, etc.</span>\r\n}\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifndef</span> JucePlugin_PreferredChannelConfigurations</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">JRGranularAudioProcessor::isBusesLayoutSupported</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> BusesLayout&#x26; layouts)</span> <span class=\"hljs-keyword\">const</span>\r\n</span>{\r\n  <span class=\"hljs-meta\">#<span class=\"hljs-keyword\">if</span> JucePlugin_IsMidiEffect</span>\r\n    juce::<span class=\"hljs-built_in\">ignoreUnused</span> (layouts);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n  <span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\r\n    <span class=\"hljs-comment\">// This is the place where you check if the layout is supported.</span>\r\n    <span class=\"hljs-comment\">// In this template code we only support mono or stereo.</span>\r\n    <span class=\"hljs-comment\">// Some plugin hosts, such as certain GarageBand versions, will only</span>\r\n    <span class=\"hljs-comment\">// load plugins that support stereo bus layouts.</span>\r\n    <span class=\"hljs-keyword\">if</span> (layouts.<span class=\"hljs-built_in\">getMainOutputChannelSet</span>() != juce::AudioChannelSet::<span class=\"hljs-built_in\">mono</span>()\r\n     &#x26;&#x26; layouts.<span class=\"hljs-built_in\">getMainOutputChannelSet</span>() != juce::AudioChannelSet::<span class=\"hljs-built_in\">stereo</span>())\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n\r\n    <span class=\"hljs-comment\">// This checks if the input layout matches the output layout</span>\r\n   <span class=\"hljs-meta\">#<span class=\"hljs-keyword\">if</span> ! JucePlugin_IsSynth</span>\r\n    <span class=\"hljs-keyword\">if</span> (layouts.<span class=\"hljs-built_in\">getMainOutputChannelSet</span>() != layouts.<span class=\"hljs-built_in\">getMainInputChannelSet</span>())\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n   <span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n  <span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\r\n}\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">JRGranularAudioProcessor::processBlock</span> <span class=\"hljs-params\">(juce::AudioBuffer&#x3C;<span class=\"hljs-type\">float</span>>&#x26; buffer, juce::MidiBuffer&#x26; midiMessages)</span>\r\n</span>{\r\n    juce::<span class=\"hljs-built_in\">ignoreUnused</span> (midiMessages);\r\n    <span class=\"hljs-keyword\">auto</span> bufferSize = buffer.<span class=\"hljs-built_in\">getNumSamples</span>();\r\n\r\n    rnboObject.<span class=\"hljs-built_in\">prepareToProcess</span> (<span class=\"hljs-built_in\">getSampleRate</span>(), \r\n                                 <span class=\"hljs-built_in\">static_cast</span>&#x3C;<span class=\"hljs-type\">size_t</span>> (bufferSize));\r\n\r\n    rnboObject.<span class=\"hljs-built_in\">process</span> (buffer.<span class=\"hljs-built_in\">getArrayOfWritePointers</span>(),\r\n                        <span class=\"hljs-built_in\">static_cast</span>&#x3C;RNBO::Index> (buffer.<span class=\"hljs-built_in\">getNumChannels</span>()),\r\n                        buffer.<span class=\"hljs-built_in\">getArrayOfWritePointers</span>(),\r\n                        <span class=\"hljs-built_in\">static_cast</span>&#x3C;RNBO::Index> (buffer.<span class=\"hljs-built_in\">getNumChannels</span>()),\r\n                        <span class=\"hljs-built_in\">static_cast</span>&#x3C;RNBO::Index> (bufferSize));\r\n}\r\n\r\n<span class=\"hljs-comment\">//==============================================================================</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">JRGranularAudioProcessor::hasEditor</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span>\r\n</span>{\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// (change this to false if you choose to not supply an editor)</span>\r\n}\r\n\r\n<span class=\"hljs-function\">juce::AudioProcessorEditor* <span class=\"hljs-title\">JRGranularAudioProcessor::createEditor</span><span class=\"hljs-params\">()</span>\r\n</span>{\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">JRGranularAudioProcessorEditor</span> (*<span class=\"hljs-keyword\">this</span>, apvts, undoManager);\r\n    <span class=\"hljs-comment\">/* return new juce::GenericAudioProcessorEditor (*this); */</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">//==============================================================================</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">JRGranularAudioProcessor::getStateInformation</span> <span class=\"hljs-params\">(juce::MemoryBlock&#x26; destData)</span>\r\n</span>{\r\n    <span class=\"hljs-function\">juce::MemoryOutputStream <span class=\"hljs-title\">mos</span> <span class=\"hljs-params\">(destData, <span class=\"hljs-literal\">true</span>)</span></span>;\r\n    apvts.state.<span class=\"hljs-built_in\">writeToStream</span> (mos);\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">JRGranularAudioProcessor::setStateInformation</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">void</span>* data, <span class=\"hljs-type\">int</span> sizeInBytes)</span>\r\n</span>{\r\n    <span class=\"hljs-keyword\">auto</span> tree = juce::ValueTree::<span class=\"hljs-built_in\">readFromData</span> (data, <span class=\"hljs-built_in\">static_cast</span>&#x3C;<span class=\"hljs-type\">size_t</span>> (sizeInBytes));\r\n\r\n    <span class=\"hljs-keyword\">if</span> (tree.<span class=\"hljs-built_in\">isValid</span>())\r\n        apvts.<span class=\"hljs-built_in\">replaceState</span> (tree);\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">JRGranularAudioProcessor::parameterChanged</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> juce::String&#x26; parameterID, <span class=\"hljs-type\">float</span> newValue)</span>\r\n</span>{\r\n    rnboObject.<span class=\"hljs-built_in\">setParameterValue</span> (apvtsParamIdToRnboParamIndex[parameterID], newValue);\r\n}\r\n\r\n<span class=\"hljs-comment\">//==============================================================================</span>\r\n<span class=\"hljs-comment\">// This creates new instances of the plugin..</span>\r\n<span class=\"hljs-function\">juce::AudioProcessor* JUCE_CALLTYPE <span class=\"hljs-title\">createPluginFilter</span><span class=\"hljs-params\">()</span>\r\n</span>{\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">JRGranularAudioProcessor</span>();\r\n}\n</code></pre>\n<p>Now you have completed the minimum configuration required to link the exported code to JUCE.</p>\n<h2 id=\"genericaudioprocessoreditor\">GenericAudioProcessorEditor</h2>\n<p>Using juce::GenericAudioProcessorEditor, you can quickly build the plugin without implementing the UI. Edit the following and build it.</p>\n<div class=\"rehype-code-title\">PluginProcessor.cpp</div><pre><code class=\"hljs language-C++\"><span class=\"hljs-function\">juce::AudioProcessorEditor* <span class=\"hljs-title\">JRGranularAudioProcessor::createEditor</span><span class=\"hljs-params\">()</span>\r\n</span>{\r\n    <span class=\"hljs-comment\">/* return new JRGranularAudioProcessorEditor (*this, apvts, undoManager); */</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> juce::<span class=\"hljs-built_in\">GenericAudioProcessorEditor</span> (*<span class=\"hljs-keyword\">this</span>);\r\n}\n</code></pre>\n<div class=\"rehype-code-title\">CommandLine</div><pre><code class=\"hljs language-text\">$ rm -rf build\r\n$ cmake -S . -B build -DCMAKE_BUILD_TYPE=Release\r\n$ cmake --build build --config Release\n</code></pre>\n<p>After the successful build, you can run the VST3/AU plugin on your DAW.</p>\n<p><img src=\"/images/jr-granular/generic-editor.png\" alt=\"generic-editor.png\"></p>\n<h2 id=\"customising-the-juce-ui\">Customising the JUCE UI</h2>\n<h3 id=\"preparing-for-the-customisation\">Preparing for the customisation</h3>\n<p>We will use the plugin editor, so disable the GenericAudioProcessorEditor:</p>\n<div class=\"rehype-code-title\">PluginProcessor.cpp</div><pre><code class=\"hljs language-C++\"><span class=\"hljs-function\">juce::AudioProcessorEditor* <span class=\"hljs-title\">JRGranularAudioProcessor::createEditor</span><span class=\"hljs-params\">()</span>\r\n</span>{\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">JRGranularAudioProcessorEditor</span> (*<span class=\"hljs-keyword\">this</span>, apvts, undoManager);\r\n    <span class=\"hljs-comment\">/* return new juce::GenericAudioProcessorEditor (*this); */</span>\r\n}\n</code></pre>\n<p>Create customised colours for use in the UI.</p>\n<div class=\"rehype-code-title\">CommandLine</div><pre><code class=\"hljs language-text\">$ touch Source/MyColours.h\n</code></pre>\n<div class=\"rehype-code-title\">MyColours.h</div><pre><code class=\"hljs language-C++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> once</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&#x3C;JuceHeader.h></span></span>\r\n\r\n<span class=\"hljs-keyword\">namespace</span> MyColours\r\n{\r\n    <span class=\"hljs-keyword\">const</span> juce::Colour blue      { <span class=\"hljs-number\">0xff6dd4ff</span> };\r\n    <span class=\"hljs-keyword\">const</span> juce::Colour cream     { <span class=\"hljs-number\">0xfff6f9e4</span> };\r\n    <span class=\"hljs-keyword\">const</span> juce::Colour grey      { <span class=\"hljs-number\">0xffa0a0a0</span> };\r\n    <span class=\"hljs-keyword\">const</span> juce::Colour midGrey   { <span class=\"hljs-number\">0xff666666</span> };\r\n    <span class=\"hljs-keyword\">const</span> juce::Colour blackGrey { <span class=\"hljs-number\">0xff353535</span> };\r\n    <span class=\"hljs-keyword\">const</span> juce::Colour black     { <span class=\"hljs-number\">0xff141414</span> };\r\n    <span class=\"hljs-keyword\">const</span> juce::Colour red       { <span class=\"hljs-number\">0xffff3f3f</span> };\r\n}\n</code></pre>\n<p>After this, your directory structure should look something like this:\r\n<img src=\"/images/jr-granular/directories.png\" alt=\"directories.png\"></p>\n<p>Edit PluginEditor.h/cpp as follows. This section implements the Undo/Redo features and other small UI settings.</p>\n<div class=\"rehype-code-title\">PluginEditor.h</div><pre><code class=\"hljs language-C++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&#x3C;JuceHeader.h></span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">\"PluginProcessor.h\"</span></span>\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title hljs-class\">JRGranularAudioProcessorEditor</span>  : <span class=\"hljs-keyword\">public</span> juce::AudioProcessorEditor\r\n{\r\n<span class=\"hljs-keyword\">public</span>:\r\n    <span class=\"hljs-built_in\">JRGranularAudioProcessorEditor</span> (JRGranularAudioProcessor&#x26; p,\r\n                                    juce::AudioProcessorValueTreeState&#x26; state,\r\n                                    juce::UndoManager&#x26; um);\r\n\r\n    ~<span class=\"hljs-built_in\">JRGranularAudioProcessorEditor</span>() <span class=\"hljs-keyword\">override</span>;\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">paint</span> <span class=\"hljs-params\">(juce::Graphics&#x26;)</span> <span class=\"hljs-keyword\">override</span></span>;\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">resized</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">override</span></span>;\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">keyPressed</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> juce::KeyPress&#x26; key)</span> <span class=\"hljs-keyword\">override</span></span>;\r\n\r\n<span class=\"hljs-keyword\">private</span>:\r\n    JRGranularAudioProcessor&#x26; audioProcessor;\r\n    juce::UndoManager&#x26; undoManager;\r\n\r\n    <span class=\"hljs-built_in\">JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR</span> (JRGranularAudioProcessorEditor)\r\n};\n</code></pre>\n<div class=\"rehype-code-title\">PluginEditor.cpp</div><pre><code class=\"hljs language-c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">\"PluginProcessor.h\"</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">\"PluginEditor.h\"</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">\"MyColours.h\"</span></span>\r\n\r\nJRGranularAudioProcessorEditor::<span class=\"hljs-built_in\">JRGranularAudioProcessorEditor</span> (JRGranularAudioProcessor&#x26; p,\r\n                                                                juce::AudioProcessorValueTreeState&#x26; state,\r\n                                                                juce::UndoManager&#x26; um)\r\n    : <span class=\"hljs-built_in\">AudioProcessorEditor</span> (&#x26;p), <span class=\"hljs-built_in\">audioProcessor</span> (p), <span class=\"hljs-built_in\">undoManager</span> (um)\r\n{\r\n    <span class=\"hljs-built_in\">setWantsKeyboardFocus</span> (<span class=\"hljs-literal\">true</span>);\r\n    <span class=\"hljs-built_in\">setSize</span> (<span class=\"hljs-number\">440</span>, <span class=\"hljs-number\">280</span>);\r\n}\r\n\r\nJRGranularAudioProcessorEditor::~<span class=\"hljs-built_in\">JRGranularAudioProcessorEditor</span>()\r\n{\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">JRGranularAudioProcessorEditor::paint</span> <span class=\"hljs-params\">(juce::Graphics&#x26; g)</span>\r\n</span>{\r\n    g.<span class=\"hljs-built_in\">fillAll</span> (MyColours::black);\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">JRGranularAudioProcessorEditor::resized</span><span class=\"hljs-params\">()</span>\r\n</span>{\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">JRGranularAudioProcessorEditor::keyPressed</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> juce::KeyPress&#x26; key)</span>\r\n</span>{\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">auto</span> cmdZ = juce::KeyPress { <span class=\"hljs-string\">'z'</span>, juce::ModifierKeys::commandModifier, <span class=\"hljs-number\">0</span> };\r\n\r\n    <span class=\"hljs-keyword\">if</span> (key == cmdZ &#x26;&#x26; undoManager.<span class=\"hljs-built_in\">canUndo</span>())\r\n    {\r\n        undoManager.<span class=\"hljs-built_in\">undo</span>();\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">auto</span> cmdShiftZ = juce::KeyPress { <span class=\"hljs-string\">'z'</span>, juce::ModifierKeys::commandModifier \r\n                                                 | juce::ModifierKeys::shiftModifier, <span class=\"hljs-number\">0</span> };\r\n\r\n    <span class=\"hljs-keyword\">if</span> (key == cmdShiftZ &#x26;&#x26; undoManager.<span class=\"hljs-built_in\">canRedo</span>())\r\n    {\r\n        undoManager.<span class=\"hljs-built_in\">redo</span>();\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n}\n</code></pre>\n<p>After completing the above settings, build and run the standalone and you should see a black editor as shown below.</p>\n<div class=\"rehype-code-title\">CommandLine</div><pre><code class=\"hljs language-text\">$ cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug\r\n$ cmake --build build --config Debug\r\n$ build/JR-Granular_artefacts/Debug/Standalone/JR-Granular.app/Contents/MacOS/JR-Granular\n</code></pre>\n<p><img src=\"/images/jr-granular/setting-up.png\" alt=\"setting-up.png\"></p>\n<h3 id=\"adding-the-custom-dial-component\">Adding the custom dial component</h3>\n<p>This chapter adds customised UI components.</p>\n<p>This Dial has the same look and feel as Ableton's Dial and reproduces equivalent features:</p>\n<ul>\n<li>value changes: dragging or arrow keys</li>\n<li>fine mode: shift + dragging or shift + arrow keys</li>\n<li>edit mode: 0-9</li>\n<li>undo: [mac] cmd + z, [win] ctrl + z</li>\n<li>redo: [mac] cmd + shift + z, [win] ctrl + shift + z</li>\n<li>reset: double click</li>\n</ul>\n<p>Create Dial.h/cpp files.</p>\n<div class=\"rehype-code-title\">CommandLine</div><pre><code class=\"hljs language-text\">$ touch Source/Dial.{h,cpp}\n</code></pre>\n<p>Copy and paste the contents of Dial.h/cpp from the link below.</p>\n<ul>\n<li><a href=\"https://github.com/szkkng/jr-granular/blob/main/Source/GUI/Dial.h\">Dial.h</a></li>\n<li><a href=\"https://github.com/szkkng/jr-granular/blob/main/Source/GUI/Dial.cpp\">Dial.cpp</a></li>\n</ul>\n<p>Add the following line to the CMakeLists.txt file.</p>\n<div class=\"rehype-code-title\">CMakeLists.txt</div><pre><code class=\"hljs language-diff\">...\r\ntarget_sources(\"${PROJECT_NAME}\"\r\n    PRIVATE\r\n        RnboExport/rnbo_granular.cpp\r\n        RnboExport/rnbo/RNBO.cpp\r\n        Source/PluginProcessor.cpp\r\n        Source/PluginEditor.cpp\r\n<span class=\"hljs-addition\">+       Source/Dial.cpp)</span>\r\n...\n</code></pre>\n<p>Include the Dial.h file and declare the Dial objects.</p>\n<div class=\"rehype-code-title\">PluginEditor.h</div><pre><code class=\"hljs language-c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">\"Dial.h\"</span></span>\n</code></pre>\n<div class=\"rehype-code-title\">PluginEditor.h</div><pre><code class=\"hljs language-c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title hljs-class\">JRGranularAudioProcessorEditor</span>  : <span class=\"hljs-keyword\">public</span> juce::AudioProcessorEditor\r\n{\r\n<span class=\"hljs-keyword\">public</span>:\r\n...\r\n<span class=\"hljs-keyword\">private</span>:\r\n...\r\n    Dial intvDial;\r\n    Dial pitchDial;\r\n    Dial sizeDial;\r\n    Dial posDial;\r\n    Dial widthDial;\r\n    Dial mixDial;\r\n    Dial gainDial;\r\n\r\n    <span class=\"hljs-built_in\">JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR</span> (JRGranularAudioProcessorEditor)\r\n};\n</code></pre>\n<p>Connect the corresponding APVTS parameters to each Dial and set them to be displayed in the plugin editor.</p>\n<div class=\"rehype-code-title\">PluginEditor.cpp</div><pre><code class=\"hljs language-c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">\"ParamIDs.h\"</span></span>\n</code></pre>\n<div class=\"rehype-code-title\">PluginEditor.cpp</div><pre><code class=\"hljs language-c++\">JRGranularAudioProcessorEditor::<span class=\"hljs-built_in\">JRGranularAudioProcessorEditor</span> (JRGranularAudioProcessor&#x26; p,\r\n                                                                juce::AudioProcessorValueTreeState&#x26; state,\r\n                                                                juce::UndoManager&#x26; um)\r\n    : <span class=\"hljs-built_in\">AudioProcessorEditor</span> (&#x26;p), <span class=\"hljs-built_in\">audioProcessor</span> (p), <span class=\"hljs-built_in\">undoManager</span> (um),\r\n      <span class=\"hljs-built_in\">intvDial</span>  (*state.<span class=\"hljs-built_in\">getParameter</span> (ParamIDs::interval),  um),\r\n      <span class=\"hljs-built_in\">pitchDial</span> (*state.<span class=\"hljs-built_in\">getParameter</span> (ParamIDs::pitch),     um),\r\n      <span class=\"hljs-built_in\">sizeDial</span>  (*state.<span class=\"hljs-built_in\">getParameter</span> (ParamIDs::grainSize), um),\r\n      <span class=\"hljs-built_in\">posDial</span>   (*state.<span class=\"hljs-built_in\">getParameter</span> (ParamIDs::grainPos),  um),\r\n      <span class=\"hljs-built_in\">widthDial</span> (*state.<span class=\"hljs-built_in\">getParameter</span> (ParamIDs::width),     um),\r\n      <span class=\"hljs-built_in\">mixDial</span>   (*state.<span class=\"hljs-built_in\">getParameter</span> (ParamIDs::mix),       um),\r\n      <span class=\"hljs-built_in\">gainDial</span>  (*state.<span class=\"hljs-built_in\">getParameter</span> (ParamIDs::gain),      um)\r\n\r\n{\r\n    <span class=\"hljs-built_in\">setWantsKeyboardFocus</span> (<span class=\"hljs-literal\">true</span>);\r\n    <span class=\"hljs-built_in\">setSize</span> (<span class=\"hljs-number\">440</span>, <span class=\"hljs-number\">280</span>);\r\n\r\n    intvDial.<span class=\"hljs-built_in\">setLabelText</span> (<span class=\"hljs-string\">\"intv\"</span>);\r\n    mixDial.<span class=\"hljs-built_in\">setLabelText</span>  (<span class=\"hljs-string\">\"mix\"</span>);\r\n    posDial.<span class=\"hljs-built_in\">setLabelText</span>  (<span class=\"hljs-string\">\"pos\"</span>);\r\n    sizeDial.<span class=\"hljs-built_in\">setLabelText</span> (<span class=\"hljs-string\">\"size\"</span>);\r\n    gainDial.<span class=\"hljs-built_in\">setLabelText</span> (<span class=\"hljs-string\">\"vol\"</span>);\r\n\r\n    <span class=\"hljs-comment\">// Set interval of values changed by arrow keys or shift + arrow keys.</span>\r\n    intvDial.<span class=\"hljs-built_in\">setInterval</span> (<span class=\"hljs-number\">5.0f</span>);\r\n    intvDial.<span class=\"hljs-built_in\">setFineInterval</span> (<span class=\"hljs-number\">1.0f</span>);\r\n    sizeDial.<span class=\"hljs-built_in\">setInterval</span> (<span class=\"hljs-number\">5.0f</span>);\r\n    sizeDial.<span class=\"hljs-built_in\">setFineInterval</span> (<span class=\"hljs-number\">1.0f</span>);\r\n    posDial.<span class=\"hljs-built_in\">setInterval</span> (<span class=\"hljs-number\">5.0f</span>);\r\n    posDial.<span class=\"hljs-built_in\">setFineInterval</span> (<span class=\"hljs-number\">1.0f</span>);\r\n    pitchDial.<span class=\"hljs-built_in\">setInterval</span> (<span class=\"hljs-number\">1.0f</span>);\r\n    pitchDial.<span class=\"hljs-built_in\">setFineInterval</span> (<span class=\"hljs-number\">0.1f</span>);\r\n    gainDial.<span class=\"hljs-built_in\">setInterval</span> (<span class=\"hljs-number\">1.0f</span>);\r\n    gainDial.<span class=\"hljs-built_in\">setFineInterval</span> (<span class=\"hljs-number\">0.1f</span>);\r\n\r\n    <span class=\"hljs-built_in\">addAndMakeVisible</span> (sizeDial);\r\n    <span class=\"hljs-built_in\">addAndMakeVisible</span> (posDial);\r\n    <span class=\"hljs-built_in\">addAndMakeVisible</span> (intvDial);\r\n    <span class=\"hljs-built_in\">addAndMakeVisible</span> (widthDial);\r\n    <span class=\"hljs-built_in\">addAndMakeVisible</span> (pitchDial);\r\n    <span class=\"hljs-built_in\">addAndMakeVisible</span> (mixDial);\r\n    <span class=\"hljs-built_in\">addAndMakeVisible</span> (gainDial);\r\n}\n</code></pre>\n<div class=\"rehype-code-title\">PluginEditor.cpp</div><pre><code class=\"hljs language-c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">JRGranularAudioProcessorEditor::resized</span><span class=\"hljs-params\">()</span>\r\n</span>{\r\n    intvDial.<span class=\"hljs-built_in\">setBounds</span>  (<span class=\"hljs-number\">30</span>,  <span class=\"hljs-number\">30</span>,  <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">95</span>);\r\n    pitchDial.<span class=\"hljs-built_in\">setBounds</span> (<span class=\"hljs-number\">130</span>, <span class=\"hljs-number\">30</span>,  <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">95</span>);\r\n    sizeDial.<span class=\"hljs-built_in\">setBounds</span>  (<span class=\"hljs-number\">230</span>, <span class=\"hljs-number\">30</span>,  <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">95</span>);\r\n    posDial.<span class=\"hljs-built_in\">setBounds</span>   (<span class=\"hljs-number\">330</span>, <span class=\"hljs-number\">30</span>,  <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">95</span>);\r\n    widthDial.<span class=\"hljs-built_in\">setBounds</span> (<span class=\"hljs-number\">80</span>,  <span class=\"hljs-number\">155</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">95</span>);\r\n    mixDial.<span class=\"hljs-built_in\">setBounds</span>   (<span class=\"hljs-number\">180</span>, <span class=\"hljs-number\">155</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">95</span>);\r\n    gainDial.<span class=\"hljs-built_in\">setBounds</span>  (<span class=\"hljs-number\">280</span>, <span class=\"hljs-number\">155</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">95</span>);\r\n}\n</code></pre>\n<h3 id=\"embedding-a-custom-font\">Embedding a custom font</h3>\n<p>The font embedded in JR-Granular is FuturaMedium.ttf font, which is automatically <a href=\"https://support.apple.com/en-us/HT212587\">installed</a> in macOS.</p>\n<p>Launch Font Book application and look for Futura Medium Font.</p>\n<p><img src=\"/images/jr-granular/futura-medium.png\" alt=\"futura-medium.png\"></p>\n<p>Use Finder application to show where this font is on your system. You can find the .ttc file in this way:</p>\n<p><img src=\"/images/jr-granular/find-ttc.png\" alt=\"find-ttc.png\"></p>\n<p>A .ttc file is like a collection of .ttf files, and in the case of Futura.ttc, it contains the following .ttf files:</p>\n<ul>\n<li>Futura-Medium.ttf</li>\n<li>Futura-MediumItalic.ttf</li>\n<li>Futura-Bold.ttf</li>\n<li>Futura-CondensedMedium.ttf</li>\n<li>Futura-CondensedExtraBold.ttf</li>\n</ul>\n<p>Since we only want to use Futura-Medium.ttf, use the tool below to break down the .ttc file into multiple .ttf files and download only the Futura-Medium.ttf.</p>\n<ul>\n<li><a href=\"https://transfonter.org/ttc-unpack\">Transfonter</a></li>\n</ul>\n<p><img src=\"/images/jr-granular/transfonter.png\" alt=\"transfonter.png\"></p>\n<p>Create Resources directory, rename the downloaded Futura-Medium-01.ttf to FuturaMedium.ttf and place it under the directory.</p>\n<div class=\"rehype-code-title\">CommandLine</div><pre><code class=\"hljs language-text\">$ mkdir Resources\r\n$ mv ~/Downloads/Futura-Medium-01.ttf Resources/FuturaMedium.ttf\n</code></pre>\n<p>After these settings, your directory structure should look something like this:</p>\n<p><img src=\"/images/jr-granular/dir-structure.png\" alt=\"dir-structure.png\"></p>\n<p>Go to the CMakeLists.txt, add juce_add_binary_data function and edit target_link_libraries function:</p>\n<div class=\"rehype-code-title\">CMakeLists.txt</div><pre><code class=\"hljs language-diff\"><span class=\"hljs-addition\">+ juce_add_binary_data(BinaryData</span>\r\n<span class=\"hljs-addition\">+     SOURCES</span>\r\n<span class=\"hljs-addition\">+         Resources/FuturaMedium.ttf)</span>\r\n\r\ntarget_link_libraries(\"${PROJECT_NAME}\"\r\n    PRIVATE\r\n<span class=\"hljs-addition\">+       BinaryData</span>\r\n        juce::juce_audio_utils\r\n        juce::juce_recommended_config_flags\r\n        juce::juce_recommended_lto_flags\r\n        juce::juce_recommended_warning_flags)\n</code></pre>\n<p>Finally, add the following code in the constructor of the plugin editor.</p>\n<div class=\"rehype-code-title\">pluginEditor.cpp</div><pre><code class=\"hljs language-c++\">JRGranularAudioProcessorEditor::<span class=\"hljs-built_in\">JRGranularAudioProcessorEditor</span> (JRGranularAudioProcessor&#x26; p,\r\n                                                                juce::AudioProcessorValueTreeState&#x26; state,\r\n                                                                juce::UndoManager&#x26; um)\r\n...\r\n{\r\n    <span class=\"hljs-keyword\">auto</span> futuraMedium = juce::Typeface::<span class=\"hljs-built_in\">createSystemTypefaceFor</span> (BinaryData::FuturaMedium_ttf, \r\n                                                                 BinaryData::FuturaMedium_ttfSize);\r\n    juce::LookAndFeel::<span class=\"hljs-built_in\">getDefaultLookAndFeel</span>().<span class=\"hljs-built_in\">setDefaultSansSerifTypeface</span> (futuraMedium);\r\n...\r\n}\n</code></pre>\n<h3 id=\"building\">Building</h3>\n<p>All done! Build and run it on your DAW.</p>\n<div class=\"rehype-code-title\">CommandLine</div><pre><code class=\"hljs language-text\">$ rm -rf build\r\n$ cmake -S . -B build -DCMAKE_BUILD_TYPE=Release\r\n$ cmake --build build --config Release\n</code></pre>\n<p><img src=\"/images/jr-granular/finish.png\" alt=\"finish.png\"></p>\n<h2 id=\"closing\">Closing</h2>\n<p>In this tutorial I have explained the following:</p>\n<ul>\n<li>how to do the RNBO C++ export</li>\n<li>how to include the exported code into a JUCE project</li>\n<li>how to connect the exported code and JUCE using <a href=\"https://docs.juce.com/master/classAudioProcessorValueTreeState.html\">APVTS</a></li>\n</ul>\n<p>If there are any typos or better ways of the implementation, please do comment. Happy Coding!</p>\n<h2 id=\"references\">References</h2>\n<ul>\n<li><a href=\"https://rnbo.cycling74.com/learn/using-the-audio-plugin-template\">Using the Audio Plugin/Application Template</a></li>\n<li><a href=\"https://rnbo.cycling74.com/learn/programming-a-custom-ui-with-juce\">Programming a Custom UI with JUCE</a></li>\n<li><a href=\"https://rnbo.cycling74.com/cpp\">RNBO C++ API Reference</a></li>\n<li><a href=\"https://github.com/Cycling74/gen-plugin-export\">Cycling74/gen-plugin-export</a></li>\n<li><a href=\"https://docs.juce.com/master/index.html\">JUCE: Class Index</a></li>\n</ul>","title":"JR-Granular - JUCE & RNBO C++ Export","createdDate":"2022-11-02","updatedDate":"2022-11-23","thumbnail":"/images/jr-granular/jr-granular.png"}},"__N_SSG":true}